{:min-bb-version "0.3.7"
 :paths ["script"]
 :deps {lread/status-line {:git/url "https://github.com/lread/status-line.git"
                           :sha "cf44c15f30ea3867227fa61ceb823e5e942c707f"}
        dev.nubank/docopt {:mvn/version "0.6.1-fix7"}
        version-clj/version-clj {:mvn/version "2.0.2"}}

 :tasks {;; setup
         :requires ([babashka.fs :as fs]
                    [clojure.string :as string]
                    [helper.main :as main]
                    [lread.status-line :as status])
         :init (do
                 (defn no-args-check []
                   (main/doc-arg-opt *command-line-args*))
                 (defn requested-clojure-version
                   ([] (requested-clojure-version ["1.9" "1.10" "1.11" "1.12"]))
                   ([allowed-versions]
                    (let [args-usage (string/join "\n"
                                                  ["Valid args: [options]"
                                                   ""
                                                   "Options:"
                                                   (format "  -v, --clojure-version VERSION  Test with Clojure %s [default: 1.10]"
                                                           (-> allowed-versions vec pr-str (string/replace "\"" "")))
                                                   "  --help                         Show this help"])]
                      (when-let [opts (main/doc-arg-opt args-usage *command-line-args*)]
                        (let [clojure-version (get opts "--clojure-version")]
                          (if (not (some #{clojure-version} allowed-versions))
                            (status/die 1 args-usage)
                            clojure-version))))))
                 (defn run-under [clojure-versions task-sym]
                   (doseq [clojure-version clojure-versions] ;; kaocha min versio is 1.9
                     (binding [*command-line-args* ["--clojure-version" clojure-version]]
                       (run task-sym)))))
         :enter (let [{:keys [name accepts-args?]} (current-task)]
                  (when-not (string/starts-with? name "-")
                    (status/line :head "TASK %s %s" name (string/join " " *command-line-args*))))
         :leave (let [{:keys [name]} (current-task)]
                  (when-not (string/starts-with? name "-")
                    (status/line :detail "\nTASK %s done." name)))

         ;; commands
         download-deps {:doc "bring down Clojure deps"
                        :task (clojure "-T:build download-deps")}

         lint {:doc "[--rebuild] lint source code with clj-kondo"
               :task lint/-main}

         clean {:doc "delete generated/cached build work"
                :task clean/-main}

         test-unit {:doc "test-doc-block units tests under Clojure"
                    :task (when-let [clojure-version (requested-clojure-version)]
                            (status/line :detail "Testing with clojure v%s" clojure-version)
                            (clojure (format "-M:kaocha:%s unit" clojure-version)))}

         gen {:doc "generate tests from sample docs"
              :task (when-let [clojure-version (requested-clojure-version)]
                      (let [target "target/test-doc-blocks"
                            success-marker (fs/file target "SUCCESS")
                            regen-reason (if (not (fs/exists? success-marker))
                                           "a previous successful gen result not found"
                                           (let [newer-thans (fs/modified-since target
                                                                                 (concat
                                                                                  (fs/glob "doc" "**.{adoc,md,cljc}")
                                                                                  (fs/glob "src" "**/*.*")))]
                                             (when (seq newer-thans)
                                               (str "found files newer than last gen: " (mapv str newer-thans)))))]
                        (if regen-reason
                          (do
                            (fs/delete-if-exists success-marker)
                            (status/line :detail "Generating tests: %s" regen-reason)
                            (status/line :detail "using clojure v%s" clojure-version)
                            (clojure (format "-X:test-doc-blocks:test-opts:%s gen-tests" clojure-version))
                            (spit success-marker "SUCCESS"))
                          (status/line :detail "Tests already successfully generated - run a \"bb clean\" to force regen"))))}

         -gen-1.10 (run-under ["1.10"] 'gen)

         gen-to-expected {:doc "generate tests from sample docs to the expected result"
                          :task (clojure "-X:test-doc-blocks:test-opts:regen-opts gen-tests")}

         test-gen-kaocha {:doc "use kaocha to run generated tests"
                          :task (when-let [clojure-version (requested-clojure-version)]
                                  (run '-gen-1.10)
                                  (status/line :detail "Testing with clojure v%s" clojure-version)
                                  (clojure (format "-M:isolated/kaocha:%s generated" clojure-version)))}

         test-gen-clj {:doc "use Clojure test-runner to run generated tests"
                       :task (when-let [clojure-version (requested-clojure-version ["1.8" "1.9" "1.10" "1.11" "1.12"])]
                               (run '-gen-1.10)
                               (status/line :detail "Testing with clojure v%s" clojure-version)
                               (clojure (format "-M:isolated/clj-test-runner:%s" clojure-version)))}

         test-gen-cljs {:doc "use cljs-test-runner to run generated tests"
                        :task (do
                                (run '-gen-1.10)
                                (clojure "-M:isolated/cljs-test-runner"))}

         test-gen-all {:doc "run generated tests under all platforms"
                       :depends [test-gen-kaocha test-gen-clj test-gen-cljs]}

         test-integration {:doc "verify that generated tests match last verified run"
                           :task (when-let [clojure-version (requested-clojure-version)]
                                   (status/line :detail "Verifying under clojure v%s" clojure-version)
                                   (clojure (format "-M:kaocha:%s integration" clojure-version)))}

         outdated {:doc "report on outdated Clojure dependencies"
                   :task outdated/-main}

         doc-update-readme {:doc "honour our contributors in README"
                            :task doc-update-readme/-main}

         cljdoc-preview {:doc "preview what docs will look like on cljdoc, use --help for args"
                         :task cljdoc-preview/-main}

         ci-test {:doc "run continuous integration service tests"
                  :task (when (no-args-check)
                          (run 'clean)
                          (run 'lint)
                          (run-under ["1.9" "1.10" "1.11" "1.12"] 'test-unit)
                          (run-under ["1.9" "1.10" "1.11" "1.12"] 'test-integration)
                          (run 'gen)
                          (run-under ["1.9" "1.10" "1.11" "1.12"] 'test-gen-kaocha) ;; kaocha min versio is 1.9
                          (run-under ["1.8" "1.9" "1.10" "1.11" "1.12"] 'test-gen-clj) ;; also include 1.8
                          (run 'test-gen-cljs))}

         ci-release {:doc "release task, use --help for args"
                     :requires [ci-release]
                     :task ci-release/-main}}}
